#!/bin/bash


#function to take an error message and output it to stderr
function error()
{
echo "Error - $1" >>/dev/stderr
}

#function to get the x,y element from a matrix, grabs the relevant line, then the relevant word from the line
function grab()
{
line=$(head -$2 $3 | tail -1)
word=$(echo "$line" | cut -f $1)
echo "$word"
}

function dims()
{
#checking if the right number of args have been provided (either 0 or 1)
if [ "$#" != "1" ] && [ "$#" != "0" ]
then
	error "busted, wrong number of arguments"
	exit 1
fi

#width set to 1 because I am lazy and also bad, and counted tabs to check width
width="1"
height="0"
while IFS= read line 
do
	((height++))
done < "$datafilepath"
read -r line < "$datafilepath"
for (( i=0; i<${#line}; i++  ))
do
#checks to see if each sequential character is a tab	
	if [ "${line:$i:1}" = "	" ]
	then
		((width++))
	fi
done

echo "$height $width"
}

#this function is exactly the same as dims, but only takes file input so it can be used inside other funtions without causing conflict
function dimshard()
{

width="1"
height="0"
while IFS= read line 
do
	((height++))
done < "$1"
read -r line < "$1"
for (( i=0; i<${#line}; i++  ))
do
	
	if [ "${line:$i:1}" = "	" ]
	then
		((width++))
	fi
done

echo "$height $width"
}


function transpose()
{
#checking if the right number of args have been provided (either 0 or 1)
if [ "$#" -ne "1" ] && [ "$#" -ne "0" ]
then
	error "busted, wrong number of arguments"
	exit 1
fi
#grab the dimensions from dims
dimyx=$(dims "$datafilepath")

#chop up the dimenstions from dims into two variables
dimy=$(echo "$dimyx" | cut -d " " -f 1)
dimx=$(echo "$dimyx" | cut -d " " -f 2)
#loop through the matrix and swap around the parts
for (( i=1; i<=$dimx; i++ ))
do
	for (( j=1; j<=$dimy; j++ ))
	do
		tmp=$(grab $i $j $datafilepath)
		if [ ! "$j" = "$dimy" ]
		then
			printf "%s\t" "$tmp"
		else
			printf "%s\n" "$tmp"
		fi
	done
done
}

function mean()
{
#checking if the right number of args have been provided (either 0 or 1)
if [ ! "$#" > "1" ]
then
	error "busted, wrong number of arguments"
	exit 1
fi
#grab the dimensions from dims
dimyx=$(dims "$datafilepath")

#chop up the dimenstions from dims into two variables
dimy=$(echo "$dimyx" | cut -d " " -f 1)
dimx=$(echo "$dimyx" | cut -d " " -f 2)
#loop through the matrix and add up and divide the parts
for (( i=1; i<=$dimx; i++ ))
do
	tmp=0
	for (( j=1; j<=$dimy; j++ ))
	do
		(( tmp += $(grab $i $j $datafilepath) ))
	done
		tmp=$(( ($tmp + ($dimy / 2)*( ($tmp > 0 )*2 - 1 )) / $dimy ))
	if [ ! "$i" = "$dimx" ]
		then
			printf "%s\t" "$tmp"
		else
			printf "%s\n" "$tmp"
	fi

done
}

function add()
{
#checking if the right number of args have been provided (2)
if [  "$#" != "2" ]
then
	error "busted, wrong number of arguments"
	exit 1
fi
#grab the dimensions of both matrices from dims
dimyx1=$(dimshard "$datafilepath")
dimyx2=$(dimshard "$data2filepath")

#chop up the dimenstions from dims into two variables
dimy1=$(echo "$dimyx1" | cut -d " " -f 1)
dimx1=$(echo "$dimyx1" | cut -d " " -f 2)

dimy2=$(echo "$dimyx2" | cut -d " " -f 1)
dimx2=$(echo "$dimyx2" | cut -d " " -f 2)
if [  "$dimx1" != "$dimx2" ] || [  "$dimy1" != "$dimy2" ]
then
	error "these can't be added"
	exit 1
fi

#loop through the matrix and add the parts
for (( i=1; i<=$dimy1; i++ ))
do
	for (( j=1; j<=$dimx1; j++ ))
	do
		tmp1=$(grab $j $i $datafilepath)
		tmp2=$(grab $j $i $data2filepath)
		tmp=$(( tmp1 + tmp2 ))
		if [ ! "$j" = "$dimx1" ]
		then
			printf "%s\t" "$tmp"
		else
			printf "%s\n" "$tmp"
		fi
	done
	
done
}

function multiply()
{
#checking if the right number of args have been provided (2)
if [  "$#" != "2" ]
then
	error "busted, wrong number of arguments"
	exit 1
fi
#grab the dimensions of both matrices from dimshard
dimyx1=$(dimshard "$datafilepath")
dimyx2=$(dimshard "$data2filepath")

#chop up the dimenstions from dims into two variables
dimy1=$(echo "$dimyx1" | cut -d " " -f 1)
dimx1=$(echo "$dimyx1" | cut -d " " -f 2)

dimy2=$(echo "$dimyx2" | cut -d " " -f 1)
dimx2=$(echo "$dimyx2" | cut -d " " -f 2)
if [  "$dimx1" != "$dimy2" ]
then
	error "these can't be multiplied"
	exit 1
fi

#loop through the matrix and multiply the parts
for (( i=1; i<=$dimy1; i++ ))
do
	for (( j=1; j<=$dimx2; j++ ))
	do
	tmp=0
		for (( k=1; k<=$dimx1; k++ ))
		do
			tmp1=$(grab $k $i $datafilepath)
			tmp2=$(grab $j $k $data2filepath)
			(( tmp+= (tmp1*tmp2) ))
		done
		if [ ! "$j" = "$dimx2" ]
		then
			printf "%s\t" "$tmp"
		else
			printf "%s\n" "$tmp"
		fi
	done
	
done
}

#check to see if the first argument is a valid command
if [ "$1" != "dims" ] && [ "$1" != "transpose" ] && [ "$1" != "mean" ] && [ "$1" != "add" ] && [ "$1" != "multiply" ]
then
	error "bad command"
	exit 1
fi
#if the command is add or multiply, make sure file names are supplied
if [ "$1" = "add" ] && [ "$#" != "3" ]
then
	error "wrong args"
	exit 1
fi

if [ "$1" = "multiply" ] && [ "$#" != "3" ]
then
	error "wrong args"
	exit 1
fi



#method to load matrix from a file or from stdin courtesy of the hints part of the assignment page
#also checking if the files that are provided via command prompt acutally exist
datafilepath="datafile$$"
data2filepath="data2file$$"
if [ "$#" = "0" ]
then
	error "busted, you didn't supply any arguments"
	exit 1
elif [ "$#" = "1" ]
then
	cat > "$datafilepath"
elif [ "$#" = "2" ]
then
	datafilepath=$2
	if [[ ! -f "$datafilepath" || ! -r "$datafilepath" ]]
	then
		error "busted, that file does not exist or is not readable"
		exit 1
	fi
elif [ "$#" = "3" ]
then
	datafilepath=$2
	data2filepath=$3
	if [[ ! -f "$datafilepath" || ! -r "$datafilepath" ]] || [[ ! -f "$data2filepath" || ! -r "$data2filepath" ]]

	then
		error "busted, a file does not exist"
		exit 1
	fi
else
	error "too many arguments"
	exit 1
fi

#function pass courtesy of hints on canvas
$1 "${@:2}"
#cleanup any created files
rm -f datafile*
